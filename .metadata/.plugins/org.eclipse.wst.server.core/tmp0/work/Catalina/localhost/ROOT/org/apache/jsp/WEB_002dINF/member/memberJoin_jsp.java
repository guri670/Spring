/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-10-31 06:04:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class memberJoin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE HTML>\n");
      out.write("<HTML>\n");
      out.write("<HEAD>\n");
      out.write("<TITLE>회원가입</TITLE>\n");
      out.write("<link href=\"../resources/css/style2.css\" type=\"text/css\" rel=\"stylesheet\">\n");
      out.write("<script src=\"https://code.jquery.com/jquery-latest.min.js\"></script>\n");
      out.write("<!-- CBN 주소 -->\n");
      out.write("<script>\n");
      out.write("//alert(\"ddddd\");\n");
      out.write("\n");
      out.write("const email = /[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[ 0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]$/i;\n");
      out.write("	\n");
      out.write("//alert(email.test(\"hello5#emaicom\"));\n");
      out.write("	\n");
      out.write("\n");
      out.write("//버튼을 눌렀을때 check함수 작동\n");
      out.write("function check(){\n");
      out.write("	\n");
      out.write("	//유효성 검사하기	\n");
      out.write("	var fm = document.frm;	\n");
      out.write("	\n");
      out.write("	\n");
      out.write("	if (fm.memberid.value ==\"\"){\n");
      out.write("		alert(\"아이디를 입력해주세요\");\n");
      out.write("		fm.memberid.focus();\n");
      out.write("		return;\n");
      out.write("	}else if (fm.btn.value ==\"N\"){\n");
      out.write("		alert(\"아이디 중복체크를 해주세요\")\n");
      out.write("		fm.memberid.focus();\n");
      out.write("		return;\n");
      out.write("	}else if (fm.memberpwd.value ==\"\"){		\n");
      out.write("		alert(\"비밀번호를 입력해주세요\");\n");
      out.write("		fm.memberpwd.focus();\n");
      out.write("		return;\n");
      out.write("	}else if (fm.memberpwd2.value ==\"\"){\n");
      out.write("		alert(\"비밀번호2를 입력해주세요\");\n");
      out.write("		fm.memberpwd2.focus();\n");
      out.write("		return;\n");
      out.write("	}else if (fm.memberpwd.value != fm.memberpwd2.value){\n");
      out.write("		alert(\"비밀번호가 일치하지 않습니다.\");\n");
      out.write("		fm.memberpwd2.value=\"\";\n");
      out.write("		fm.memberpwd2.focus();\n");
      out.write("		return;\n");
      out.write("	}else if (fm.membername.value ==\"\"){\n");
      out.write("		alert(\"이름을 입력해주세요\");\n");
      out.write("		fm.membername.focus();\n");
      out.write("		return;\n");
      out.write("	}else if (fm.memberemail.value ==\"\"){\n");
      out.write("		alert(\"이메일을 입력해주세요\");\n");
      out.write("		fm.memberemail.focus();\n");
      out.write("		return;\n");
      out.write("	}else if (email.test(fm.memberemail.value)== false){\n");
      out.write("		alert(\"이메일 형식이 올바르지 않습니다.\");\n");
      out.write("		fm.memberemail.value=\"\";\n");
      out.write("		fm.memberemail.focus();\n");
      out.write("		return;\n");
      out.write("	}else if (fm.memberphone.value ==\"\"){\n");
      out.write("		alert(\"연락처를 입력해주세요\");\n");
      out.write("		fm.memberphone.focus();\n");
      out.write("		return;\n");
      out.write("	}else if (fm.memberbirth.value ==\"\"){\n");
      out.write("		alert(\"생년월일을 입력해주세요\");\n");
      out.write("		fm.memberbirth.focus();\n");
      out.write("		return;\n");
      out.write("	}else if (hobbyCheck() ==false)  {	\n");
      out.write("		alert(\"취미를 한개 이상 선택해주세요\");	\n");
      out.write("		return;\n");
      out.write("	}	\n");
      out.write("	\n");
      out.write("	var ans = confirm(\"저장하시겠습니까?\");\n");
      out.write("	\n");
      out.write("	if (ans == true){\n");
      out.write("		//alert(\"이동할 정보등록할 차례입니다.\");\n");
      out.write("		//action=\"./memberJoinAction.jsp\" method=\"post\"  html 홈태그 기능을 자바스크립트로 제어\n");
      out.write("		\n");
      out.write("		\n");
      out.write("		// 가상경로를 사용해서 쓸 예정 , 가짜경로의 형식은 /기능/세부기능.aws\n");
      out.write("\n");
      out.write("	fm.action = \"");
      out.print(request.getContextPath());
      out.write("/member/memberJoinAction.aws\";\n");
      out.write("			fm.method = \"post\";\n");
      out.write("			fm.submit();\n");
      out.write("		}\n");
      out.write("		return; //리턴에 값을 안쓰면 그냥 멈춤 종료\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	function hobbyCheck() {\n");
      out.write("\n");
      out.write("		var arr = document.frm.memberhobby; //문서객체안에 폼객체 안에 input객체 선언\n");
      out.write("		var flag = false; //체크유무 초기값 false 선언\n");
      out.write("\n");
      out.write("		for (var i = 0; i < arr.length; i++) { //선택한 여러값을 반복해서 출력\n");
      out.write("			if (arr[i].checked == true) { //하나라도 선택했다면 true값 리턴\n");
      out.write("				flag = true;\n");
      out.write("				break;\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		/* if (flag== false){\n");
      out.write("			alert(\"취미를 한개 이상 선택해주세요\");\n");
      out.write("			return false;\n");
      out.write("		}	 */\n");
      out.write("		return flag;\n");
      out.write("	}\n");
      out.write("	$(document).ready(function() {\n");
      out.write("		\n");
      out.write("		$(\"#btn\").click(function() {\n");
      out.write("			//	alert(\"중복체크버튼 클릭\");\n");
      out.write("\n");
      out.write("			let memberId = $(\"#memberid\").val();\n");
      out.write("			if (memberId ==\"\"){\n");
      out.write("				alert(\"아이디를 입력해주세요\");\n");
      out.write("				return;\n");
      out.write("			}\n");
      out.write("			$.ajax({\n");
      out.write("				type : \"post\", // 전송방식\n");
      out.write("				url : \"");
      out.print(request.getContextPath());
      out.write(" /member/memberIdCheck.aws\", //  넘기는 주소\n");
      out.write("				dataType : \"json\", // json타입은 문서에서 {\"키값\" : \"value값\",\"키값2\": \"value값2\"}\n");
      out.write("				data : { \"memberId\" : memberId },\n");
      out.write("				success : function(result) { // 결과가 넘어와서 성공했을 때 받는 영역\n");
      out.write("					// alert(\"전송 성공 테스트\");\n");
      out.write("					// alert(\"길이는? \" + result.length);\n");
      out.write("					alert(\"cnt값은? \" + result.cnt);\n");
      out.write("					\n");
      out.write("					if (result.cnt == 0){\n");
      out.write("						alert(\"사용할 수 있는 아이디입니다.\");\n");
      out.write("						$(\"btn\").val(\"Y\");\n");
      out.write("					} else {\n");
      out.write("						alert(\"사용할 수 없는 아이디입니다.\");\n");
      out.write("						$(\"#memberid\").val(\"\"); // 입력한 아이디 지우기\n");
      out.write("					}\n");
      out.write("				},\n");
      out.write("				error : function(result) {\n");
      out.write("					alert(\"전송 실패 테스트\");\n");
      out.write("				}\n");
      out.write("\n");
      out.write("			});\n");
      out.write("		});\n");
      out.write("	});\n");
      out.write("</script>\n");
      out.write("</HEAD>\n");
      out.write("\n");
      out.write("<BODY>\n");
      out.write("	<header>\n");
      out.write("		<h3>회원가입 페이지</h3>\n");
      out.write("		<hr>\n");
      out.write("	</header>\n");
      out.write("	<nav>\n");
      out.write("		<!--  <a href=\"./memberLogin.jsp\" style=\"text-decoration:none;\">회원로그인 가기</a> -->\n");
      out.write("	</nav>\n");
      out.write("	<section>\n");
      out.write("		<article>\n");
      out.write("			<form name=\"frm\">\n");
      out.write("				<table style=\"width: 800px;\">\n");
      out.write("					<tr>\n");
      out.write("						<th class=\"idcolor\">아이디</th>\n");
      out.write("						<td><input type=\"text\" id=\"memberid\" name=\"memberid\" maxlength=\"30\"\n");
      out.write("							style=\"width: 200px;\" value=\"\" placeholder=\"아이디를 입력하세요\">\n");
      out.write("							<button type=\"button\" name=\"btn\" id=\"btn\" value=\"N\">아이디 중복 체크</button></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th class=\"idcolor\">비밀번호</th>\n");
      out.write("						<td><input type=\"password\" name=\"memberpwd\" maxlength=\"30\"\n");
      out.write("							style=\"width: 100px;\"></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th>비밀번호확인</th>\n");
      out.write("						<td><input type=\"password\" name=\"memberpwd2\" maxlength=\"30\"\n");
      out.write("							style=\"width: 100px;\"></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th id=\"name\">이름</th>\n");
      out.write("						<td><input type=\"text\" name=\"membername\" maxlength=\"30\"\n");
      out.write("							style=\"width: 200px;\"></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th>이메일</th>\n");
      out.write("						<td><input type=\"email\" name=\"memberemail\" maxlength=\"30\"\n");
      out.write("							style=\"width: 200px;\"></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th>연락처</th>\n");
      out.write("						<td><input type=\"number\" name=\"memberphone\" maxlength=\"30\"\n");
      out.write("							style=\"width: 200px;\"></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th>주소</th>\n");
      out.write("						<td><select name=\"memberaddr\" style=\"width: 100px;\">\n");
      out.write("								<option value=\"서울\">서울</option>\n");
      out.write("								<option value=\"대전\" selected>대전</option>\n");
      out.write("								<option value=\"부산\">부산</option>\n");
      out.write("								<option value=\"인천\">인천</option>\n");
      out.write("						</select></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th>성별</th>\n");
      out.write("						<td><input type=\"radio\" name=\"membergender\" id=\"select1\"\n");
      out.write("							value=\"M\"><label for=\"select1\">남성</label> <input\n");
      out.write("							type=\"radio\" name=\"membergender\" id=\"select2\" value=\"F\" checked><label\n");
      out.write("							for=\"select2\">여성</label></td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th>생년월일</th>\n");
      out.write("						<td><input type=\"number\" name=\"memberbirth\" maxlength=\"8\"\n");
      out.write("							style=\"width: 100px;\"> 예)20240101</td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<th>취미</th>\n");
      out.write("						<td><input type=\"checkbox\" name=\"memberhobby\" id=\"check1\"\n");
      out.write("							value=\"야구\"><label for=\"check1\"></label>야구 <input\n");
      out.write("							type=\"checkbox\" name=\"memberhobby\" id=\"check2\" value=\"축구\"><label\n");
      out.write("							for=\"check2\"></label>축구 <input type=\"checkbox\" name=\"memberhobby\"\n");
      out.write("							id=\"check3\" value=\"농구\"><label for=\"check3\"></label>농구</td>\n");
      out.write("					</tr>\n");
      out.write("					<tr>\n");
      out.write("						<td colspan=2 style=\"text-align: center; height: 60px;\">\n");
      out.write("							<button type=\"button\" onclick=\"check();\">저장하기\n");
      out.write("								<!--<img   src=\"../images/conc.png\" width=\"50px\" height=\"30px\">-->\n");
      out.write("							</button> <!-- <input type=\"submit\" name=\"btn\" value=\"회원정보 저장하기\">\n");
      out.write("				<input type=\"reset\" name=\"btn\" value=\"초기화\"> -->\n");
      out.write("						</td>\n");
      out.write("					</tr>\n");
      out.write("				</table>\n");
      out.write("			</form>\n");
      out.write("		</article>\n");
      out.write("\n");
      out.write("	</section>\n");
      out.write("	<aside></aside>\n");
      out.write("	<footer> made by hji. </footer>\n");
      out.write("</BODY>\n");
      out.write("</HTML>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
